name: FBGEMMCI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v2
    - name: Checkout submodules
      shell: bash
      run: |
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

    - name: Get CPU info on Ubuntu
      if: contains(runner.os, 'linux')
      run: |
        cat /proc/cpuinfo

    - name: Get CPU info on macOS
      if: contains(runner.os, 'macOs')
      run: |
        sysctl -a | grep machdep.cpu

    - name: Get env vars
      run: |
        echo GITHUB_WORKFLOW   = $GITHUB_WORKFLOW
        echo HOME              = $HOME
        echo GITHUB_ACTION     = $GITHUB_ACTION
        echo GITHUB_ACTIONS    = $GITHUB_ACTIONS
        echo GITHUB_REPOSITORY = $GITHUB_REPOSITORY
        echo GITHUB_EVENT_NAME = $GITHUB_EVENT_NAME
        echo GITHUB_EVENT_PATH = $GITHUB_EVENT_PATH
        echo GITHUB_WORKSPACE  = $GITHUB_WORKSPACE
        echo GITHUB_SHA        = $GITHUB_SHA
        echo GITHUB_REF        = $GITHUB_REF
        c++ --verbose

    - name: Build static FBGEMM lib
      run: |
        set -e
        mkdir build_static
        cd build_static
        cmake -DUSE_SANITIZER=address -DFBGEMM_LIBRARY_TYPE=static ..
        make

    - name: Test static FBGEMM lib
      if: contains(runner.os, 'linux')   # not run on macos-latest now due to supporting AVX2
      run: |
        set -e
        cd build_static
        ctest

    - name: Build shared FBGEMM lib
      run: |
        set -e
        mkdir build_shared
        cd build_shared
        cmake -DUSE_SANITIZER=address -DFBGEMM_LIBRARY_TYPE=shared ..
        make

    - name: Test shared FBGEMM lib
      if: contains(runner.os, 'linux')   # not run on macos-latest now due to supporting AVX2
      run: |
        set -e
        cd build_shared
        ctest

  build_amd_gpu:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - name: Free space
      run: sudo rm -rf /usr/local/android /usr/share/dotnet /usr/local/share/boost /opt/ghc /usr/local/share/chrom* /usr/share/swift /usr/local/julia* /usr/local/lib/android

    - uses: actions/checkout@v2

    - name: Install ROCm 5.1.1
      shell: bash
      run: |
        sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 10
        wget https://repo.radeon.com/amdgpu-install/22.10.1/ubuntu/bionic/amdgpu-install_22.10.1.50101-1_all.deb
        export DEBIAN_FRONTEND=noninteractive
        sudo apt install -y ./amdgpu-install_22.10.1.50101-1_all.deb || true
        # amdgpu-install --help
        amdgpu-install -y --usecase=hiplibsdk,rocm --no-dkms
        sudo rm amdgpu-install_22.10.1.50101-1_all.deb

    - name: Install dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get -y install git pip python3-dev mesa-common-dev clang comgr libopenblas-dev jp intel-mkl-full locales libnuma-dev
        sudo apt-get install -y hipify-clang || true
        sudo pip install cmake scikit-build ninja jinja2 numpy hypothesis --no-input
        sudo apt-get clean
        # Install pytorch 1.11 as required by fbgemm_gpu
        sudo pip install --pre torch torchvision --extra-index-url https://download.pytorch.org/whl/nightly/rocm5.1.1/

    - name: Checkout submodules
      shell: bash
      run: |
        cd fbgemm_gpu
        git submodule sync
        git submodule update --init --recursive

    - name: Build fbgemm_gpu
      shell: bash
      run: |
        sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 10
        cd fbgemm_gpu
        # build for MI250 only to save time.
        sudo PYTORCH_ROCM_ARCH=gfx90a python3 setup.py build develop

    - name: Test fbgemm_gpu installation
      shell: bash
      run: |
        cd fbgemm_gpu
        cd test
        python3 input_combine_test.py
        python3 quantize_ops_test.py
        python3 sparse_ops_test.py
        python3 -c "import fbgemm_gpu"
        python3 -c "import fbgemm_gpu.split_embedding_codegen_lookup_invokers"
