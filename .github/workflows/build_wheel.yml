name: Build Wheel

on:
  workflow_call:
    inputs:
      release_version:
        required: true
        type: string
      upload_pypi:
        required: true
        type: boolean

jobs:
  wheel_setup:
    runs-on: [ubuntu-latest]
    outputs:
      pytorch_channel: ${{ steps.output_variables.outputs.pytorch_channel }}
      fbgemm_package_name: ${{ steps.output_variables.outputs.fbgemm_package_name }}
      torchrec_package_name: ${{ steps.output_variables.outputs.torchrec_package_name }}
    steps:
    - id: output_variables
      run: |
        if [ x"${{ inputs.release_version }}" == x"nightly" ]; then
          echo "pytorch_channel=pytorch-nightly" >> $GITHUB_OUTPUT
          echo "fbgemm_package_name=fbgemm_gpu_nightly" >> $GITHUB_OUTPUT
          echo "torchrec_package_name=torchrec_nightly" >> $GITHUB_OUTPUT
        elif [ x"${{ inputs.release_version }}" == x"prerelease" ]; then
          echo "pytorch_channel=pytorch-test" >> $GITHUB_OUTPUT
          echo "fbgemm_package_name=fbgemm_gpu_test" >> $GITHUB_OUTPUT
          echo "torchrec_package_name=torchrec_test" >> $GITHUB_OUTPUT
        elif [ x"${{ inputs.release_version }}" == x"release" ]; then
          echo "pytorch_channel=pytorch" >> $GITHUB_OUTPUT
          echo "fbgemm_package_name=fbgemm_gpu" >> $GITHUB_OUTPUT
          echo "torchrec_package_name=torchrec" >> $GITHUB_OUTPUT
        else
          echo "Error: unknown release_version ${{ inputs.release_version }}"
          exit 1
        fi

  # Build on CPU hosts and upload *.whl as an GitHub Action artifact
  build_wheel:
    needs: [wheel_setup]
    strategy:
      matrix:
        os: [linux.4xlarge]
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        cuda-tag: ["cpu", "cu11"]

    uses: pytorch/test-infra/.github/workflows/linux_job.yml@main
    with:
      job-name: build_wheel (${{ matrix.python-version }}_${{ matrix.cuda-tag }})
      runner: ${{ matrix.os }}
      repository: pytorch/fbgemm
      gpu-arch-type: cpu
      upload-artifact: ${{ needs.wheel_setup.outputs.fbgemm_package_name }}_${{ matrix.python-version }}_${{ matrix.cuda-tag }}
      timeout: 300
      script: |
        set -x
        # Checkout FBGEMM_GPU
        git submodule update --init

        # Build Wheel
        if [ x"${{ matrix.cuda-tag }}" == x"cpu" ]; then
          # Empty string
          PYTORCH_CUDA_VERSION=""
        else
          PYTORCH_CUDA_VERSION="11.7"
        fi
        bash .github/scripts/build_wheel.bash -v -p ${{ matrix.python-version }} -o ${{ needs.wheel_setup.outputs.fbgemm_package_name }} -P ${{ needs.wheel_setup.outputs.pytorch_channel }} -c "${PYTORCH_CUDA_VERSION}" -m "/opt/conda"

        FBGEMM_ARTIFACT_PATH="${RUNNER_ARTIFACT_DIR}/${{ needs.wheel_setup.outputs.fbgemm_package_name }}_${{ matrix.python-version }}_${{ matrix.cuda-tag }}"
        mkdir -p "$FBGEMM_ARTIFACT_PATH"
        mv fbgemm_gpu/dist/*.whl "${FBGEMM_ARTIFACT_PATH}"

        ls "${RUNNER_ARTIFACT_DIR}"
        ls "${FBGEMM_ARTIFACT_PATH}"

  # Download the GitHub Action artifact and test the artifact on a GPU machine
  test_wheel_gpu:
    needs: [wheel_setup, build_wheel]
    strategy:
      matrix:
        os: [linux.g5.4xlarge.nvidia.gpu]
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        cuda-tag: ["cu11"]

    uses: pytorch/test-infra/.github/workflows/linux_job.yml@main
    with:
      job-name: test_wheel_gpu (${{ matrix.python-version }}_${{ matrix.cuda-tag }})
      runner: ${{ matrix.os }}
      repository: pytorch/fbgemm
      gpu-arch-type: cuda
      gpu-arch-version: 11.7
      download-artifact: ${{ needs.wheel_setup.outputs.fbgemm_package_name }}_${{ matrix.python-version }}_${{ matrix.cuda-tag }}
      timeout: 300
      script: |
        set -x
        ls "${RUNNER_ARTIFACT_DIR}"
        ls "${RUNNER_ARTIFACT_DIR}/${{ needs.wheel_setup.outputs.fbgemm_package_name }}_${{ matrix.python-version }}_${{ matrix.cuda-tag }}"

        # Checkout FBGEMM_GPU
        git submodule update --init

        # Test Wheel
        PYTORCH_CUDA_VERSION="11.7"
        FBGEMM_ARTIFACT_PATH="${RUNNER_ARTIFACT_DIR}/${{ needs.wheel_setup.outputs.fbgemm_package_name }}_${{ matrix.python-version }}_${{ matrix.cuda-tag }}"
        WHEEL_PATH="$(ls ${FBGEMM_ARTIFACT_PATH}/*.whl)"
        
        bash .github/scripts/test_wheel.bash -v -p ${{ matrix.python-version }} -P ${{ needs.wheel_setup.outputs.pytorch_channel }} -c "${PYTORCH_CUDA_VERSION}" -w "${WHEEL_PATH}" -m "/opt/conda"

  # Download the GitHub Action artifact and test the artifact on a GPU machine
  test_wheel_cpu:
    needs: [wheel_setup, build_wheel]
    strategy:
      matrix:
        os: [linux.4xlarge]
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        cuda-tag: ["cpu"]

    uses: pytorch/test-infra/.github/workflows/linux_job.yml@main
    with:
      job-name: test_wheel_cpu (${{ matrix.python-version }}_${{ matrix.cuda-tag }})
      runner: ${{ matrix.os }}
      repository: pytorch/fbgemm
      download-artifact: ${{ needs.wheel_setup.outputs.fbgemm_package_name }}_${{ matrix.python-version }}_${{ matrix.cuda-tag }}
      timeout: 180
      script: |
        set -x

        ls "${RUNNER_ARTIFACT_DIR}"
        ls "${RUNNER_ARTIFACT_DIR}/${{ needs.wheel_setup.outputs.fbgemm_package_name }}_${{ matrix.python-version }}_${{ matrix.cuda-tag }}"
        # Checkout FBGEMM_GPU
        git submodule update --init

        # Test Wheel
        PYTORCH_CUDA_VERSION=""
        FBGEMM_ARTIFACT_PATH="${RUNNER_ARTIFACT_DIR}/${{ needs.wheel_setup.outputs.fbgemm_package_name }}_${{ matrix.python-version }}_${{ matrix.cuda-tag }}"
        WHEEL_PATH="$(ls ${FBGEMM_ARTIFACT_PATH}/*.whl)"
        # bash .github/scripts/test_wheel.bash -v -p ${{ matrix.python-version }} -P ${{ needs.wheel_setup.outputs.pytorch_channel }} -c "${PYTORCH_CUDA_VERSION}" -w "$(ls ${RUNNER_ARTIFACT_DIR}/${{ needs.wheel_setup.outputs.fbgemm_package_name }}*.whl)" -m "/opt/conda"
